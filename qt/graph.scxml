<?xml version="1.0"?>
<scxml xmlns="http://www.w3.org/2005/07/scxml" version="0.9">
	<parallel>

		<state id="graph" initial="initial">
			<transition event="modify.nodes" target="initial"/>
			<onentry>
				<send event="hide.spinner"/>
			</onentry>

			<state id="initial">
				<onentry>
					<send event="show.spinner"/>
				</onentry>
				<transition target="dirtyNodes">
					<send event="start.layout"/>
				</transition>
			</state>

			<state id="dirtyNodes">
				<onexit>
					<send event="cancel.layout"/>
				</onexit>
				<transition event="done.layout hide.spinner" target="dirtyPaths" />
			</state>

			<state id="visibleNodes" initial="dirtyPaths">
				<transition event="grab.node" target="drag"/>
				<state id="dirtyPaths">
					<onentry>
						<send event="start.route"/>
					</onentry>
					<onexit>
						<send event="cancel.route"/>
					</onexit>
					<transition event="done.route" target="complete"/>
				</state>
				<state id="complete"/>
			</state>
			<state id="drag">
				<transition event="drop.node" target="dirtyPaths"/>
			</state>
		</state>

		<state id="node" initial="nodeHidden">
			<datamodel>
				<data id="node"/>
			</datamodel>

			<state id="nodeShown" initial="nodeDropped">
				<transition event="start.layout" target="nodeHidden"/>

				<state id="nodeGrabbed">
					<onentry>
						<send event="transition.node">
							<param name="node" expr="m_node"/>
							<param name="state" expr='"grabbed"'/>
						</send>
					</onentry>
					<transition event="release.node" cond='event["node"] == m_node' target="nodeDropped">
						<send event="drop.node">
							<param name="node" expr='event["node"]'/>
						</send>
					</transition>
				</state>

				<state id="nodeDropped">
					<onentry>
						<send event="transition.node">
							<param name="node" expr="m_node"/>
							<param name="state" expr='""'/>
						</send>
					</onentry>
					<transition event="press.node" cond='event["node"] == m_node' target="nodeGrabbed">
						<send event="grab.node">
							<param name="node" expr='event["node"]'/>
						</send>
					</transition>
				</state>
			</state>

			<state id="nodeHidden">
				<onentry>
					<send event="transition.node">
						<param name="node" expr="m_node"/>
						<param name="state" expr='"hidden"'/>
					</send>
				</onentry>
				<transition event="done.layout" target="nodeShown"/>
			</state>
		</state>

		<state id="path" initial="pathHidden">
			<datamodel>
				<data id="path"/>
			</datamodel>

			<state id="pathSimple">
				<onentry>
					<send event="transition.path">
						<param name="path" expr="m_path"/>
						<param name="state" expr='"simple"'/>
					</send>
				</onentry>
				<transition event="start.route" target="pathHidden">
				</transition>
			</state>

			<state id="pathDetailed">
				<onentry>
					<send event="transition.path">
						<param name="path" expr="m_path"/>
						<param name="state" expr='""'/>
					</send>
				</onentry>
				<transition event="start.route" target="pathHidden"/>
				<transition event="grab.node" target="pathSimple"/>
			</state>

			<state id="pathHidden">
				<onentry>
					<send event="transition.path">
						<param name="path" expr="m_path"/>
						<param name="state" expr='"hidden"'/>
					</send>
				</onentry>
				<transition event="done.route" target="pathDetailed"/>
			</state>
		</state>
	</parallel>
</scxml>
